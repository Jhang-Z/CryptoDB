{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './DataOwnerPanel.css';\nfunction DataOwnerPanel({\n  onLogout\n}) {\n  _s();\n  const [tables, setTables] = useState({});\n  const [selectedTable, setSelectedTable] = useState('');\n  const [tableData, setTableData] = useState([]);\n  const [tableHeaders, setTableHeaders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [syncStatus, setSyncStatus] = useState('Idle');\n\n  // 从服务器加载 SQL 文件\n  const loadSQLFile = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/sql/data_init.sql');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const sqlContent = await response.text();\n      return sqlContent;\n    } catch (err) {\n      setError(`无法加载 SQL 文件: ${err.message}`);\n      throw err;\n    }\n  };\n\n  // 解析 SQL 文件\n  const parseSQLFile = sqlContent => {\n    const tables = {};\n    const lines = sqlContent.split('\\n');\n    let currentTable = null;\n    let inInsertMode = false;\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n\n      // 跳过空行和注释\n      if (!trimmedLine || trimmedLine.startsWith('--') || trimmedLine.startsWith('#')) {\n        continue;\n      }\n\n      // 检测 CREATE TABLE 语句\n      const createTableMatch = trimmedLine.match(/CREATE TABLE (?:IF NOT EXISTS )?[`\"]?(\\w+)[`\"]?/i);\n      if (createTableMatch) {\n        currentTable = createTableMatch[1];\n        tables[currentTable] = {\n          columns: [],\n          data: []\n        };\n        continue;\n      }\n\n      // 检测列定义（更健壮的匹配）\n      if (currentTable && trimmedLine.match(/^[`\"]?\\w+[`\"]?\\s+\\w+/)) {\n        const columnMatch = trimmedLine.match(/^[`\"]?(\\w+)[`\"]?\\s+(\\w+)/);\n        if (columnMatch && !trimmedLine.includes('PRIMARY KEY') && !trimmedLine.includes('KEY')) {\n          tables[currentTable].columns.push({\n            name: columnMatch[1],\n            type: columnMatch[2]\n          });\n        }\n        continue;\n      }\n\n      // 检测 INSERT 语句\n      const insertMatch = trimmedLine.match(/INSERT INTO (?:IGNORE )?[`\"]?(\\w+)[`\"]?\\s*(?:\\s\\([^)]+\\))?\\s+VALUES\\s*\\(([^)]+)\\)/i);\n      if (insertMatch) {\n        const tableName = insertMatch[1];\n        const valuesStr = insertMatch[2];\n\n        // 解析 VALUES 中的值（处理各种引号格式）\n        const values = valuesStr.split(',').map(val => {\n          let trimmedVal = val.trim();\n          // 去除各种引号\n          trimmedVal = trimmedVal.replace(/^['\"`]|['\"`]$/g, '');\n          // 尝试转换为数字\n          if (!isNaN(trimmedVal) && trimmedVal !== '') {\n            return Number(trimmedVal);\n          }\n          return trimmedVal;\n        });\n        if (tables[tableName]) {\n          tables[tableName].data.push(values);\n        }\n        continue;\n      }\n\n      // 检测 LOCK/UNLOCK 语句（跳过）\n      if (trimmedLine.startsWith('LOCK TABLES') || trimmedLine.startsWith('UNLOCK TABLES')) {\n        continue;\n      }\n\n      // 检测 USE 语句（跳过）\n      if (trimmedLine.startsWith('USE ')) {\n        continue;\n      }\n\n      // 检测 DROP 语句（跳过）\n      if (trimmedLine.startsWith('DROP ')) {\n        continue;\n      }\n    }\n    return tables;\n  };\n\n  // 格式化数据为对象数组\n  const formatTableData = tableInfo => {\n    if (!tableInfo || !tableInfo.columns || !tableInfo.data) return [];\n    return tableInfo.data.map(row => {\n      const obj = {};\n      tableInfo.columns.forEach((column, index) => {\n        obj[column.name] = row[index] || '';\n      });\n      return obj;\n    });\n  };\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      try {\n        // 从服务器加载 SQL 文件\n        const sqlContent = await loadSQLFile();\n\n        // 解析 SQL 文件\n        const parsedTables = parseSQLFile(sqlContent);\n        setTables(parsedTables);\n\n        // 设置默认选中的表\n        const tableNames = Object.keys(parsedTables);\n        if (tableNames.length > 0) {\n          setSelectedTable(tableNames[0]);\n          const tableInfo = parsedTables[tableNames[0]];\n          setTableData(formatTableData(tableInfo));\n          setTableHeaders(tableInfo.columns.map(col => col.name));\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('初始化数据库失败:', err);\n        setLoading(false);\n        // 可以设置回退到模拟数据\n      }\n    };\n    initializeDatabase();\n  }, []);\n}\n// ... 其余代码保持不变 ...\n_s(DataOwnerPanel, \"YlgHATsUzFTyM//4HNDpFAgwraU=\");\n_c = DataOwnerPanel;\nvar _c;\n$RefreshReg$(_c, \"DataOwnerPanel\");","map":{"version":3,"names":["React","useState","useEffect","DataOwnerPanel","onLogout","_s","tables","setTables","selectedTable","setSelectedTable","tableData","setTableData","tableHeaders","setTableHeaders","loading","setLoading","error","setError","syncStatus","setSyncStatus","loadSQLFile","response","fetch","ok","Error","status","sqlContent","text","err","message","parseSQLFile","lines","split","currentTable","inInsertMode","line","trimmedLine","trim","startsWith","createTableMatch","match","columns","data","columnMatch","includes","push","name","type","insertMatch","tableName","valuesStr","values","map","val","trimmedVal","replace","isNaN","Number","formatTableData","tableInfo","row","obj","forEach","column","index","initializeDatabase","parsedTables","tableNames","Object","keys","length","col","console","_c","$RefreshReg$"],"sources":["/home/user/workplace/CryptoDB/frontend/src/DataOwnerPanel.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './DataOwnerPanel.css';\n\nfunction DataOwnerPanel({ onLogout }) {\n  const [tables, setTables] = useState({});\n  const [selectedTable, setSelectedTable] = useState('');\n  const [tableData, setTableData] = useState([]);\n  const [tableHeaders, setTableHeaders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [syncStatus, setSyncStatus] = useState('Idle');\n\n  // 从服务器加载 SQL 文件\n  const loadSQLFile = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/sql/data_init.sql');\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const sqlContent = await response.text();\n      return sqlContent;\n    } catch (err) {\n      setError(`无法加载 SQL 文件: ${err.message}`);\n      throw err;\n    }\n  };\n\n  // 解析 SQL 文件\n  const parseSQLFile = (sqlContent) => {\n    const tables = {};\n    const lines = sqlContent.split('\\n');\n    let currentTable = null;\n    let inInsertMode = false;\n\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n\n      // 跳过空行和注释\n      if (!trimmedLine || trimmedLine.startsWith('--') || trimmedLine.startsWith('#')) {\n        continue;\n      }\n\n      // 检测 CREATE TABLE 语句\n      const createTableMatch = trimmedLine.match(/CREATE TABLE (?:IF NOT EXISTS )?[`\"]?(\\w+)[`\"]?/i);\n      if (createTableMatch) {\n        currentTable = createTableMatch[1];\n        tables[currentTable] = {\n          columns: [],\n          data: []\n        };\n        continue;\n      }\n\n      // 检测列定义（更健壮的匹配）\n      if (currentTable && trimmedLine.match(/^[`\"]?\\w+[`\"]?\\s+\\w+/)) {\n        const columnMatch = trimmedLine.match(/^[`\"]?(\\w+)[`\"]?\\s+(\\w+)/);\n        if (columnMatch && !trimmedLine.includes('PRIMARY KEY') && !trimmedLine.includes('KEY')) {\n          tables[currentTable].columns.push({\n            name: columnMatch[1],\n            type: columnMatch[2]\n          });\n        }\n        continue;\n      }\n\n      // 检测 INSERT 语句\n      const insertMatch = trimmedLine.match(/INSERT INTO (?:IGNORE )?[`\"]?(\\w+)[`\"]?\\s*(?:\\s\\([^)]+\\))?\\s+VALUES\\s*\\(([^)]+)\\)/i);\n      if (insertMatch) {\n        const tableName = insertMatch[1];\n        const valuesStr = insertMatch[2];\n        \n        // 解析 VALUES 中的值（处理各种引号格式）\n        const values = valuesStr.split(',').map(val => {\n          let trimmedVal = val.trim();\n          // 去除各种引号\n          trimmedVal = trimmedVal.replace(/^['\"`]|['\"`]$/g, '');\n          // 尝试转换为数字\n          if (!isNaN(trimmedVal) && trimmedVal !== '') {\n            return Number(trimmedVal);\n          }\n          return trimmedVal;\n        });\n\n        if (tables[tableName]) {\n          tables[tableName].data.push(values);\n        }\n        continue;\n      }\n\n      // 检测 LOCK/UNLOCK 语句（跳过）\n      if (trimmedLine.startsWith('LOCK TABLES') || trimmedLine.startsWith('UNLOCK TABLES')) {\n        continue;\n      }\n\n      // 检测 USE 语句（跳过）\n      if (trimmedLine.startsWith('USE ')) {\n        continue;\n      }\n\n      // 检测 DROP 语句（跳过）\n      if (trimmedLine.startsWith('DROP ')) {\n        continue;\n      }\n    }\n\n    return tables;\n  };\n\n  // 格式化数据为对象数组\n  const formatTableData = (tableInfo) => {\n    if (!tableInfo || !tableInfo.columns || !tableInfo.data) return [];\n    \n    return tableInfo.data.map(row => {\n      const obj = {};\n      tableInfo.columns.forEach((column, index) => {\n        obj[column.name] = row[index] || '';\n      });\n      return obj;\n    });\n  };\n\n  useEffect(() => {\n    const initializeDatabase = async () => {\n      try {\n        // 从服务器加载 SQL 文件\n        const sqlContent = await loadSQLFile();\n        \n        // 解析 SQL 文件\n        const parsedTables = parseSQLFile(sqlContent);\n        setTables(parsedTables);\n\n        // 设置默认选中的表\n        const tableNames = Object.keys(parsedTables);\n        if (tableNames.length > 0) {\n          setSelectedTable(tableNames[0]);\n          const tableInfo = parsedTables[tableNames[0]];\n          setTableData(formatTableData(tableInfo));\n          setTableHeaders(tableInfo.columns.map(col => col.name));\n        }\n\n        setLoading(false);\n      } catch (err) {\n        console.error('初始化数据库失败:', err);\n        setLoading(false);\n        // 可以设置回退到模拟数据\n      }\n    };\n\n    initializeDatabase();\n  }, []);\n}\n  // ... 其余代码保持不变 ..."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}