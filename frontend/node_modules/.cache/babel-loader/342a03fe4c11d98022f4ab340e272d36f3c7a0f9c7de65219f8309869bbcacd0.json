{"ast":null,"code":"var _jsxFileName = \"/home/user/workplace/test/frontend/src/CryptoDBPanel.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import './CryptoDBPanel.css'; // 引入样式文件\n\n// function CryptoDBPanel() {\n//   const [query, setQuery] = useState('');\n//   const [results, setResults] = useState('');\n\n//   const handleSecureQuery = async () => {\n//   if (!query.trim()) {\n//     alert('请输入一个查询后再提交。');\n//     return;\n//   }\n\n//   const response = await fetch('http://172.28.7.202:8080/api/secureQuery', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json', // 告诉后端我们传的是 JSON\n//       },\n//       body: JSON.stringify({ query }), // 发送一个 JSON 对象，包含用户输入的 query\n//     });\n\n//   const resultFromBackend = await response.text(); // 如果后端返回纯文本\n//   setResults(resultFromBackend);\n\n//   };\n\n//   const handleClearInput = () => {\n//     setQuery('');\n//     setResults('');\n//   };\n\n//   const handleDecryptResults = () => {\n//     if (!results.trim()) {\n//       alert('No encrypted results to decrypt.');\n//       return;\n//     }\n//     // 模拟解密（实际应发送到后端）\n//     setResults(`[模拟解密结果]\\n原始加密内容：\\n${results}\\n\\n解密后：这是一个模拟的解密结果！`);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"logo-container\">\n//         <div className=\"logo\"></div>\n//         <div className=\"logo-text\">CryptoDB UI</div>\n//       </div>\n\n//       <div className=\"main-content\">\n//         <div className=\"query-section\">\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Encrypted Query Input</div>\n//             <textarea\n//               id=\"query-input\"\n//               className=\"query-input\"\n//               placeholder=\"Enter your encrypted SQL query here...\"\n//               value={query}\n//               onChange={(e) => setQuery(e.target.value)}\n//             ></textarea>\n//             <button id=\"secure-query\" className=\"btn btn-secure\" onClick={handleSecureQuery}>\n//               Secure Query\n//             </button>\n//             <button id=\"clear-input\" className=\"btn btn-clear\" onClick={handleClearInput}>\n//               Clear Input\n//             </button>\n//           </div>\n\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Query Results (Encrypted)</div>\n//             <div id=\"query-results\" className=\"query-results\">\n//               {results}\n//             </div>\n//             <button id=\"decrypt-results\" className=\"btn btn-decrypt\" onClick={handleDecryptResults}>\n//               Decrypt Results\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CryptoDBPanel;\n\nimport React, { useState } from 'react';\nimport './CryptoDBPanel.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CryptoDBPanel() {\n  _s();\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState('');\n  const [decryptedResults, setDecryptedResults] = useState(''); // 新增解密结果状态\n\n  const handleSecureQuery = async () => {\n    if (!query.trim()) {\n      alert('请输入一个查询后再提交。');\n      return;\n    }\n    const response = await fetch('http://172.28.7.202:8080/api/secureQuery', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query\n      })\n    });\n    const resultFromBackend = await response.text();\n    setResults(resultFromBackend);\n  };\n  const handleClearInput = () => {\n    setQuery('');\n    setResults('');\n  };\n  const handleDecryptResults = () => {\n    if (!results.trim()) {\n      alert('No encrypted results to decrypt.');\n      return;\n    }\n    // 模拟解密：更新 decryptedResults 状态\n    setDecryptedResults(`[模拟解密结果]\\n原始加密内容：\\n${results}\\n\\n解密后：这是一个模拟的解密结果！`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logo-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logo-text\",\n        children: \"CryptoDB UI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"query-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-title\",\n            children: \"Encrypted Query Input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"query-input\",\n            className: \"query-input\",\n            placeholder: \"Enter your encrypted SQL query here...\",\n            value: query,\n            onChange: e => setQuery(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"secure-query\",\n            className: \"btn btn-secure\",\n            onClick: handleSecureQuery,\n            children: \"Secure Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"clear-input\",\n            className: \"btn btn-clear\",\n            onClick: handleClearInput,\n            children: \"Clear Input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"panel-title\",\n            children: \"Decrypted Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"decrypted-results\",\n            className: \"query-results\",\n            children: decryptedResults\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"decrypt-results\",\n            className: \"btn btn-decrypt\",\n            onClick: handleDecryptResults,\n            children: \"Decrypt Results\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(CryptoDBPanel, \"eq0K+SxcBHZ997GQWGNcy/LwBTo=\");\n_c = CryptoDBPanel;\nexport default CryptoDBPanel;\nvar _c;\n$RefreshReg$(_c, \"CryptoDBPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CryptoDBPanel","_s","query","setQuery","results","setResults","decryptedResults","setDecryptedResults","handleSecureQuery","trim","alert","response","fetch","method","headers","body","JSON","stringify","resultFromBackend","text","handleClearInput","handleDecryptResults","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/home/user/workplace/test/frontend/src/CryptoDBPanel.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import './CryptoDBPanel.css'; // 引入样式文件\n\n// function CryptoDBPanel() {\n//   const [query, setQuery] = useState('');\n//   const [results, setResults] = useState('');\n\n\n//   const handleSecureQuery = async () => {\n//   if (!query.trim()) {\n//     alert('请输入一个查询后再提交。');\n//     return;\n//   }\n\n//   const response = await fetch('http://172.28.7.202:8080/api/secureQuery', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json', // 告诉后端我们传的是 JSON\n//       },\n//       body: JSON.stringify({ query }), // 发送一个 JSON 对象，包含用户输入的 query\n//     });\n\n//   const resultFromBackend = await response.text(); // 如果后端返回纯文本\n//   setResults(resultFromBackend);\n\n\n\n//   };\n\n//   const handleClearInput = () => {\n//     setQuery('');\n//     setResults('');\n//   };\n\n//   const handleDecryptResults = () => {\n//     if (!results.trim()) {\n//       alert('No encrypted results to decrypt.');\n//       return;\n//     }\n//     // 模拟解密（实际应发送到后端）\n//     setResults(`[模拟解密结果]\\n原始加密内容：\\n${results}\\n\\n解密后：这是一个模拟的解密结果！`);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"logo-container\">\n//         <div className=\"logo\"></div>\n//         <div className=\"logo-text\">CryptoDB UI</div>\n//       </div>\n\n//       <div className=\"main-content\">\n//         <div className=\"query-section\">\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Encrypted Query Input</div>\n//             <textarea\n//               id=\"query-input\"\n//               className=\"query-input\"\n//               placeholder=\"Enter your encrypted SQL query here...\"\n//               value={query}\n//               onChange={(e) => setQuery(e.target.value)}\n//             ></textarea>\n//             <button id=\"secure-query\" className=\"btn btn-secure\" onClick={handleSecureQuery}>\n//               Secure Query\n//             </button>\n//             <button id=\"clear-input\" className=\"btn btn-clear\" onClick={handleClearInput}>\n//               Clear Input\n//             </button>\n//           </div>\n\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Query Results (Encrypted)</div>\n//             <div id=\"query-results\" className=\"query-results\">\n//               {results}\n//             </div>\n//             <button id=\"decrypt-results\" className=\"btn btn-decrypt\" onClick={handleDecryptResults}>\n//               Decrypt Results\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default CryptoDBPanel;\n\nimport React, { useState } from 'react';\nimport './CryptoDBPanel.css';\n\nfunction CryptoDBPanel() {\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState('');\n  const [decryptedResults, setDecryptedResults] = useState(''); // 新增解密结果状态\n\n  const handleSecureQuery = async () => {\n    if (!query.trim()) {\n      alert('请输入一个查询后再提交。');\n      return;\n    }\n\n    const response = await fetch('http://172.28.7.202:8080/api/secureQuery', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ query }),\n    });\n\n    const resultFromBackend = await response.text();\n    setResults(resultFromBackend);\n  };\n\n  const handleClearInput = () => {\n    setQuery('');\n    setResults('');\n  };\n\n  const handleDecryptResults = () => {\n    if (!results.trim()) {\n      alert('No encrypted results to decrypt.');\n      return;\n    }\n    // 模拟解密：更新 decryptedResults 状态\n    setDecryptedResults(`[模拟解密结果]\\n原始加密内容：\\n${results}\\n\\n解密后：这是一个模拟的解密结果！`);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"logo-container\">\n        <div className=\"logo\"></div>\n        <div className=\"logo-text\">CryptoDB UI</div>\n      </div>\n\n      <div className=\"main-content\">\n        <div className=\"query-section\">\n          {/* 左侧面板：查询输入 */}\n          <div className=\"panel\">\n            <div className=\"panel-title\">Encrypted Query Input</div>\n            <textarea\n              id=\"query-input\"\n              className=\"query-input\"\n              placeholder=\"Enter your encrypted SQL query here...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n            ></textarea>\n            <button id=\"secure-query\" className=\"btn btn-secure\" onClick={handleSecureQuery}>\n              Secure Query\n            </button>\n            <button id=\"clear-input\" className=\"btn btn-clear\" onClick={handleClearInput}>\n              Clear Input\n            </button>\n          </div>\n\n          {/* 右侧面板：解密结果 */}\n          <div className=\"panel\">\n            <div className=\"panel-title\">Decrypted Results</div>\n            <div id=\"decrypted-results\" className=\"query-results\">\n              {decryptedResults}\n            </div>\n            <button id=\"decrypt-results\" className=\"btn btn-decrypt\" onClick={handleDecryptResults}>\n              Decrypt Results\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default CryptoDBPanel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}