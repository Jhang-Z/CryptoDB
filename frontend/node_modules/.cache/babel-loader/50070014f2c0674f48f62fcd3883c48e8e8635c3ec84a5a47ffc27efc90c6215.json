{"ast":null,"code":"var _jsxFileName = \"/home/user/workplace/test/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport LoginPage from './LoginPage'; // 引入登录组件\n\n// 原有的 CryptoDB 面板内容，我们保留在 App.js 中，但不直接渲染\n// function CryptoDBPanel() {\n//   const [query, setQuery] = useState('');\n//   const [results, setResults] = useState('');\n\n//   const handleSecureQuery = () => {\n//     if (!query.trim()) {\n//       alert('请输入查询');\n//       return;\n//     }\n//     setResults(`[模拟加密查询结果]\\n查询内容：${query}`);\n//   };\n\n//   const handleClearInput = () => {\n//     setQuery('');\n//     setResults('');\n//   };\n\n//   const handleDecryptResults = () => {\n//     if (!results.trim()) {\n//       alert('没有可解密内容');\n//       return;\n//     }\n//     setResults(`[模拟解密结果]\\n原始：${results}\\n解密后：模拟数据`);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"logo-container\">\n//         <div className=\"logo\"></div>\n//         <div className=\"logo-text\">CryptoDB UI</div>\n//       </div>\n\n//       <div className=\"main-content\">\n//         <div className=\"query-section\">\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Encrypted Query Input</div>\n//             <textarea\n//               className=\"query-input\"\n//               placeholder=\"输入加密SQL查询...\"\n//               value={query}\n//               onChange={(e) => setQuery(e.target.value)}\n//             ></textarea>\n//             <button className=\"btn btn-secure\" onClick={handleSecureQuery}>\n//               Secure Query\n//             </button>\n//             <button className=\"btn btn-clear\" onClick={handleClearInput}>\n//               Clear Input\n//             </button>\n//           </div>\n\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Query Results (Encrypted)</div>\n//             <div className=\"query-results\">{results}</div>\n//             <button className=\"btn btn-decrypt\" onClick={handleDecryptResults}>\n//               Decrypt Results\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // 控制是否已登录\n\n  const handleLoginSuccess = () => {\n    setIsLoggedIn(true); // 登录成功，显示主界面\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(CryptoDBPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this) // 登录后显示主界面\n    : /*#__PURE__*/_jsxDEV(LoginPage, {\n      onLoginSuccess: handleLoginSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this) // 否则显示登录页\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"g0MSgNVZk+vKiEFnDJ9VPEfswFA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","LoginPage","jsxDEV","_jsxDEV","App","_s","isLoggedIn","setIsLoggedIn","handleLoginSuccess","children","CryptoDBPanel","fileName","_jsxFileName","lineNumber","columnNumber","onLoginSuccess","_c","$RefreshReg$"],"sources":["/home/user/workplace/test/frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport LoginPage from './LoginPage'; // 引入登录组件\n\n// 原有的 CryptoDB 面板内容，我们保留在 App.js 中，但不直接渲染\n// function CryptoDBPanel() {\n//   const [query, setQuery] = useState('');\n//   const [results, setResults] = useState('');\n\n//   const handleSecureQuery = () => {\n//     if (!query.trim()) {\n//       alert('请输入查询');\n//       return;\n//     }\n//     setResults(`[模拟加密查询结果]\\n查询内容：${query}`);\n//   };\n\n//   const handleClearInput = () => {\n//     setQuery('');\n//     setResults('');\n//   };\n\n//   const handleDecryptResults = () => {\n//     if (!results.trim()) {\n//       alert('没有可解密内容');\n//       return;\n//     }\n//     setResults(`[模拟解密结果]\\n原始：${results}\\n解密后：模拟数据`);\n//   };\n\n//   return (\n//     <div className=\"container\">\n//       <div className=\"logo-container\">\n//         <div className=\"logo\"></div>\n//         <div className=\"logo-text\">CryptoDB UI</div>\n//       </div>\n\n//       <div className=\"main-content\">\n//         <div className=\"query-section\">\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Encrypted Query Input</div>\n//             <textarea\n//               className=\"query-input\"\n//               placeholder=\"输入加密SQL查询...\"\n//               value={query}\n//               onChange={(e) => setQuery(e.target.value)}\n//             ></textarea>\n//             <button className=\"btn btn-secure\" onClick={handleSecureQuery}>\n//               Secure Query\n//             </button>\n//             <button className=\"btn btn-clear\" onClick={handleClearInput}>\n//               Clear Input\n//             </button>\n//           </div>\n\n//           <div className=\"panel\">\n//             <div className=\"panel-title\">Query Results (Encrypted)</div>\n//             <div className=\"query-results\">{results}</div>\n//             <button className=\"btn btn-decrypt\" onClick={handleDecryptResults}>\n//               Decrypt Results\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // 控制是否已登录\n\n  const handleLoginSuccess = () => {\n    setIsLoggedIn(true); // 登录成功，显示主界面\n  };\n\n  return (\n    <div>\n      {isLoggedIn ? (\n        <CryptoDBPanel /> // 登录后显示主界面\n      ) : (\n        <LoginPage onLoginSuccess={handleLoginSuccess} /> // 否则显示登录页\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,SAAS,MAAM,aAAa,CAAC,CAAC;;AAErC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/BD,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,oBACEJ,OAAA;IAAAM,QAAA,EACGH,UAAU,gBACTH,OAAA,CAACO,aAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAAA,eAElBX,OAAA,CAACF,SAAS;MAACc,cAAc,EAAEP;IAAmB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EACnD;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACT,EAAA,CAhBQD,GAAG;AAAAY,EAAA,GAAHZ,GAAG;AAkBZ,eAAeA,GAAG;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}